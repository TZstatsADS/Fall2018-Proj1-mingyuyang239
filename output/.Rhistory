reflection_period,
age,
country,
ground_truth_category,
text) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
wordcount
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile)
library(tidyverse)
library(tidytext)
library(DT)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile)
hm_data <- hm_data %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
text) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
library(tidyverse)
library(tidytext)
library(DT)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile)
head(demo_data,5)
hm_data <- hm_data %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
text) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
head(hm_data,5)
hm_data[order(hm_data$wid),]
get_sentiment(hm_data$text, method = "syuzhet")
hm_data.male <- hm_data[, "gender" = "male"]
gender = "male"
hm_data.male <- hm_data[, gender = "male"]
hm_data.male <- hm_data[, hm_data.male$gender = "male"]
hm_data.male <- hm_data[, hm_data.male$gender = "m"]
hm_data.male$gender == "m"
hm_data$gender == "m"
hm_data.male <- hm_data[, hm_data$gender == "m"]
hm_data.male <- hm_data[hm_data$gender == "m",]
hm_data.male <- hm_data[hm_data$gender == "m",]
sentiment.male <- get_sentiment(hm_data.male$text, method = "syuzhet")
hm_data.male <- hm_data[hm_data$gender == "m",]
sentiment.male <- get_sentiment(hm_data.male$text, method = "syuzhet")
boxplot(sentiment.male, ylim=c(-5,20), main = "Male", ylab = "sentiments for Males")
boxplot(sentiment.male, ylim=c(-5,20), main = "Male", ylab = "sentiments for Males")
par(mfrow = c(1,2))
hm_data.male <- hm_data[hm_data$gender == "m",]
sentiment.male <- get_sentiment(hm_data.male$text, method = "syuzhet")
boxplot(sentiment.male, ylim=c(-5,20), main = "Male", ylab = "Males")
hm_data.female <- hm_data[hm_data$gender == "f",]
sentiment.female <- get_sentiment(hm_data.female$text, method = "syuzhet")
boxplot(sentiment.male, ylim=c(-5,20), main = "Female", ylab = " Females")
hm_data.single <- hm_data[hm_data$marital == "single",]
sentiment.single <- get_sentiment(hm_data.single$text, method = "syuzhet")
boxplot(sentiment.male, ylim=c(-5,20), main = "Single", ylab = "Single")
hm_data.single <- hm_data[hm_data$marital == "married",]
sentiment.single <- get_sentiment(hm_data.single$text, method = "syuzhet")
boxplot(sentiment.male, ylim=c(-5,20), main = "Married", ylab = "Married")
head(hm_data[hm_data$gender == "m",], 5)
head(hm_data.female, 5)
hm_data.single <- hm_data[hm_data$marital == "single",]
sentiment.single <- get_sentiment(hm_data.single$text, method = "syuzhet")
boxplot(sentiment.male, ylim=c(-5,20), main = "Single", ylab = "Single")
hm_data.married <- hm_data[hm_data$marital == "married",]
sentiment.single <- get_sentiment(hm_data.married$text, method = "syuzhet")
boxplot(sentiment.male, ylim=c(-5,20), main = "Married", ylab = "Married")
par(mfrow = c(1,2))
hm_data.male<- hm_data[hm_data$gender == "m",]
sentiment.male <- get_sentiment(hm_data.male$text, method = "syuzhet")
boxplot(sentiment.male, ylim=c(-5,20), main = "Male", ylab = "Males")
hm_data.female <- hm_data[hm_data$gender == "f",]
sentiment.female <- get_sentiment(hm_data.female$text, method = "syuzhet")
boxplot(sentiment.female, ylim=c(-5,20), main = "Female", ylab = " Females")
hm_data.single <- hm_data[hm_data$marital == "single",]
sentiment.single <- get_sentiment(hm_data.single$text, method = "syuzhet")
boxplot(sentiment.single, ylim=c(-5,20), main = "Single", ylab = "Single")
hm_data.married <- hm_data[hm_data$marital == "married",]
sentiment.married <- get_sentiment(hm_data.married$text, method = "syuzhet")
boxplot(sentiment.married, ylim=c(-5,20), main = "Married", ylab = "Married")
par(mfrow=c(4,1), mar=c(1,0,2,0), bty="n", xaxt="n", yaxt="n", font.main=1)
f.plotsent.len(In.list=sentence.list, InFile="HillaryClinton",
InType="nomin", InTerm=1, President="Hillary Clinton")
corpus.list=sentence.list[2:(nrow(sentence.list)-1), ]
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
# You may need to run
# sudo ln -f -s $(/usr/libexec/java_home)/jre/lib/server/libjvm.dylib /usr/local/lib
# in order to load qdap
library("qdap")
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
# You may need to run
# sudo ln -f -s $(/usr/libexec/java_home)/jre/lib/server/libjvm.dylib /usr/local/lib
# in order to load qdap
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
print(R.version)
### Inauguaral speeches
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
# Get link URLs
# f.speechlinks is a function for extracting links from the list of speeches.
inaug=f.speechlinks(main.page)
#head(inaug)
as.Date(inaug[,1], format="%B %e, %Y")
inaug=inaug[-nrow(inaug),] # remove the last line, irrelevant due to error.
#### Nomination speeches
main.page=read_html("http://www.presidency.ucsb.edu/nomination.php")
# Get link URLs
nomin <- f.speechlinks(main.page)
#head(nomin)
#
#### Farewell speeches
main.page=read_html("http://www.presidency.ucsb.edu/farewell_addresses.php")
# Get link URLs
farewell <- f.speechlinks(main.page)
#head(farewell)
inaug.list=read.csv("../data/inauglist.csv", stringsAsFactors = FALSE)
nomin.list=read.csv("../data/nominlist.csv", stringsAsFactors = FALSE)
farewell.list=read.csv("../data/farewelllist.csv", stringsAsFactors = FALSE)
speech.list=rbind(inaug.list, nomin.list, farewell.list)
speech.list$type=c(rep("inaug", nrow(inaug.list)),
rep("nomin", nrow(nomin.list)),
rep("farewell", nrow(farewell.list)))
speech.url=rbind(inaug, nomin, farewell)
speech.list=cbind(speech.list, speech.url)
# Loop over each row in speech.list
speech.list$fulltext=NA
for(i in seq(nrow(speech.list))) {
text <- read_html(speech.list$urls[i]) %>% # load the page
html_nodes(".displaytext") %>% # isloate the text
html_text() # get the text
speech.list$fulltext[i]=text
# Create the file name
filename <- paste0("../data/fulltext/",
speech.list$type[i],
speech.list$File[i], "-",
speech.list$Term[i], ".txt")
sink(file = filename) %>% # open file to write
cat(text)  # write the file
sink() # close the file
}
speech1=paste(readLines("../data/fulltext/SpeechDonaldTrump-NA.txt",
n=-1, skipNul=TRUE),
collapse=" ")
sentence.list=NULL
for(i in 1:nrow(speech.list)){
sentences=sent_detect(speech.list$fulltext[i],
endmarks = c("?", ".", "!", "|",";"))
if(length(sentences)>0){
emotions=get_nrc_sentiment(sentences)
word.count=word_count(sentences)
# colnames(emotions)=paste0("emo.", colnames(emotions))
# in case the word counts are zeros?
emotions=diag(1/(word.count+0.01))%*%as.matrix(emotions)
sentence.list=rbind(sentence.list,
cbind(speech.list[i,-ncol(speech.list)],
sentences=as.character(sentences),
word.count,
emotions,
sent.id=1:length(sentences)
)
)
}
}
sentence.list=
sentence.list%>%
filter(!is.na(word.count))
### Inauguaral speeches
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
# Get link URLs
# f.speechlinks is a function for extracting links from the list of speeches.
inaug=f.speechlinks(main.page)
#head(inaug)
as.Date(inaug[,1], format="%B %e, %Y")
inaug=inaug[-nrow(inaug),] # remove the last line, irrelevant due to error.
#### Nomination speeches
main.page=read_html("http://www.presidency.ucsb.edu/nomination.php")
# Get link URLs
nomin <- f.speechlinks(main.page)
#head(nomin)
#
#### Farewell speeches
main.page=read_html("http://www.presidency.ucsb.edu/farewell_addresses.php")
# Get link URLs
farewell <- f.speechlinks(main.page)
#head(farewell)
inaug.list=read.csv("../data/inauglist.csv", stringsAsFactors = FALSE)
nomin.list=read.csv("../data/nominlist.csv", stringsAsFactors = FALSE)
farewell.list=read.csv("../data/farewelllist.csv", stringsAsFactors = FALSE)
uniqueid <- unique(hm_data$wid)
library(tidyverse)
library(tidytext)
library(DT)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile)
head(demo_data,5)
hm_data <- hm_data %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
text) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
uniqueid <- unique(hm_data$wid)
doclist <- list()
?corpus
?Corpus
textman_get_doc_corpus
?textman_get_doc_corpus
hm_data$gender <- factor(hm_data$gender)
beeswarm(word.count~gender,
data=hm_data$text,
horizontal = TRUE,
pch=16, col=as.numeric(hm_data$gender)+1,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="President Index", xlab="Number of words in a sentence.",
main="Inaugural Speeches")
hm_data$gender <- factor(hm_data$gender)
hm_data$gender
factor(hm_data$gender)
word.count~gender
beeswarm(word.count~gender,
data=hm_data,
horizontal = TRUE,
pch=16, col=as.numeric(hm_data$gender)+1,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="President Index", xlab="Number of words in a sentence.",
main="Inaugural Speeches")
beeswarm(hm_data$count~gender,
data=hm_data,
horizontal = TRUE,
pch=16, col=as.numeric(hm_data$gender)+1,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="President Index", xlab="Number of words in a sentence.",
main="Inaugural Speeches")
hm_data <- hm_data[100,]
beeswarm(hm_data$count~gender,
data=hm_data,
horizontal = TRUE,
pch=16, col=as.numeric(hm_data$gender)+1,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="President Index", xlab="Number of words in a sentence.",
main="Inaugural Speeches")
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile)
head(demo_data,5)
library(tidyverse)
library(tidytext)
library(DT)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile)
head(demo_data,5)
hm_data <- hm_data %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
text) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
hm_data$gender <- factor(hm_data$gender)
hm_data.n <- hm_data[1000,]
beeswarm(hm_data.n$count~gender,
data=hm_data.n,
horizontal = TRUE,
pch=16, col=as.numeric(hm_data$gender)+1,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="President Index", xlab="Number of words in a sentence.",
main="Inaugural Speeches")
legend("topright",legend=levels(inau_infor$Party),fill=2:(length(levels(inau_infor$Party))+1),cex=1)
beeswarm(hm_data.n$count~gender,
data=hm_data.n,
horizontal = TRUE,
pch=16, col=as.numeric(hm_data$gender)+1,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="President Index", xlab="Number of words in a sentence.",
main="Inaugural Speeches")
hm_data$gender <- factor(hm_data$gender)
hm_data.n <- hm_data[1000,]
beeswarm(hm_data.n$count~gender,
data=hm_data.n,
horizontal = TRUE,
pch=16, col=as.numeric(hm_data$gender)+1,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="President Index", xlab="Number of words in a sentence.",
main="Inaugural Speeches")
legend("topright",legend=levels(inau_infor$Party),fill=2:(length(levels(inau_infor$Party))+1),cex=1)
hm_data.n
hm_data
hm_data.n <- hm_data[1000,]
hm_data.n
hm_data$gender <- factor(hm_data$gender)
hm_data.n <- hm_data[1:1000,]
beeswarm(hm_data.n$count~gender,
data=hm_data.n,
horizontal = TRUE,
pch=16, col=as.numeric(hm_data$gender)+1,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="President Index", xlab="Number of words in a sentence.",
main="Inaugural Speeches")
hm_data.n <- hm_data[1:2000,]
beeswarm(hm_data.n$count~gender,
data=hm_data.n,
horizontal = TRUE,
pch=16, col=as.numeric(hm_data$gender)+1,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="President Index", xlab="Number of words in a sentence.",
main="Inaugural Speeches")
max(hm_data.n$count)
hm_data.n[,count == 509]
hm_data.n[count == 509,]
hm_data.n["count"" == 509,]
hm_data.n["count" == 509,]
hm_data.n[hm_data.n$count == 509,]
row <- hm_data.n[hm_data.n$count == 509,]
row$text
row <- hm_data.n[hm_data.n$count == 509,]
row$original_hm
hm_data.n1 <- hm_data.n[-hm_data.n$count == 509, ]
hm_data.n1 <- hm_data.n[-hm_data.n$count == 509, ]
hm_data.n1
which(hm_data.n$count == 509)
hm_data.n1 <- hm_data.n[-which(hm_data.n$count == 509), ]
hm_data.n1
beeswarm(hm_data.n$count~gender,
data=hm_data.n,
horizontal = TRUE,
pch=16, col=as.numeric(hm_data$gender)+1,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="President Index", xlab="Number of words in a sentence.",
main="Inaugural Speeches")
beeswarm(hm_data.n1$count~gender,
data=hm_data.n1,
horizontal = TRUE,
pch=16, col=as.numeric(hm_data.n1$gender)+1,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="President Index", xlab="Number of words in a sentence.",
main="Inaugural Speeches")
as.numeric(hm_data.n1$gender)+1
beeswarm(hm_data.n1$count~gender,
data=hm_data.n1,
horizontal = TRUE,
pch=16, col=as.numeric(hm_data.n1$gender),
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="President Index", xlab="Number of words in a sentence.",
main="Inaugural Speeches")
as.numeric(hm_data.n1$gender)
?beeswarm
hm_data$gender <- factor(hm_data$gender)
beeswarm(hm_data.n1$count~gender,
data=hm_data,
horizontal = TRUE,
pch=16,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="Gender", xlab="Length of Sentences",
main="comparison of Sentence length between men and women")
hm_data$gender <- factor(hm_data$gender)
beeswarm(hm_data$count~gender,
data=hm_data,
horizontal = TRUE,
pch=16,
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="Gender", xlab="Length of Sentences",
main="comparison of Sentence length between men and women")
levels(hm_data$gender )
length(levels(hm_data$gender ))
hm_data$gender <- factor(hm_data$gender)
beeswarm(hm_data$count~gender,
data=hm_data,
horizontal = TRUE,
pch=16, col = rainbow(2)
cex=0.55, cex.axis=0.8, cex.lab=0.8,
hm_data$gender <- factor(hm_data$gender)
beeswarm(hm_data$count~gender,
data=hm_data,
horizontal = TRUE,
pch=16, col = rainbow(2),
cex=0.55, cex.axis=0.8, cex.lab=0.8,
las=2, ylab="Gender", xlab="Length of Sentences",
main="comparison of Sentence length between men and women")
docs <- Corpus(VectorSource(hm_data$text))
inspect(docs)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
