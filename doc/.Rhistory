library(tidyverse)
library(tidytext)
library(DT)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(tm)
library(wordcloud)
library(topicmodels)
library(ggplot2)
library(dplyr)
library(gplots)
library(reshape2)
library(stringr)
R.Version()$version.string
#combine data with demo data
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile)
hm_data <- hm_data %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
text) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
#substract data sets
hm_data.sp <- hm_data[hm_data$marital == "single" & hm_data$parenthood == "y",]
hm_data.mp <- hm_data[hm_data$marital == "married" & hm_data$parenthood == "y",]
hm_data.cp <- rbind(hm_data.sp,hm_data.mp)
hm_data.s <- hm_data[hm_data$marital == "single" & hm_data$parenthood == "n",]
hm_data.m <- hm_data[hm_data$marital == "married" & hm_data$parenthood == "n",]
hm_data.c <- rbind(hm_data.s,hm_data.m)
hm_data.cp$status <- ifelse(hm_data.cp$marital == "single", "Single Parents", "Married Parents")
hm_data.c$status <-ifelse(hm_data.c$marital == "single", "Single Non-parents", "Married Non-parents")
alldata <- rbind(hm_data.cp,hm_data.c)
ggplot(alldata, aes(count, status, color = status)) +
geom_point() +
geom_jitter(width = 0.5, height = 0.3) +
ggtitle("Length of Sentences for Four Groups") +
labs(x = "Length of Sentences", y = "Demographic Groups")
#wordcloud for single parents.
docs.sp <- Corpus(VectorSource(hm_data.sp$text))
dtm.sp <- TermDocumentMatrix(docs.sp)
m.sp <- as.matrix(dtm.sp)
v.sp <- sort(rowSums(m.sp),decreasing=TRUE)
d.sp <- data.frame(word = names(v.sp),freq=v.sp)
set.seed(123)
wordcloud(words = d.sp$word, freq = d.sp$freq, min.freq = 1,
max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
#wordcloud for married parents
docs.mp <- Corpus(VectorSource(hm_data.mp$text))
dtm.mp <- TermDocumentMatrix(docs.mp)
m.mp <- as.matrix(dtm.mp)
v.mp <- sort(rowSums(m.mp),decreasing=TRUE)
d.mp <- data.frame(word = names(v.mp),freq=v.mp)
set.seed(123)
wordcloud(words = d.mp$word, freq = d.mp$freq, min.freq = 1,
max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
#wordcould for single non-parents.
docs.s <- Corpus(VectorSource(hm_data.s$text))
dtm.s <- TermDocumentMatrix(docs.s)
m.s <- as.matrix(dtm.s)
v.s <- sort(rowSums(m.s),decreasing=TRUE)
d.s <- data.frame(word = names(v.s),freq=v.s)
set.seed(123)
wordcloud(words = d.s$word, freq = d.s$freq, min.freq = 1,
max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
#wordcould for married non-parents.
docs.m <- Corpus(VectorSource(hm_data.m$text))
dtm.m <- TermDocumentMatrix(docs.m)
m.m <- as.matrix(dtm.m)
v.m <- sort(rowSums(m.m),decreasing=TRUE)
d.m <- data.frame(word = names(v.m),freq=v.m)
set.seed(123)
wordcloud(words = d.m$word, freq = d.m$freq, min.freq = 1,
max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
bing <- function(df){
tokens <- data_frame(df$text) %>% unnest_tokens(word, df$text)
sentiment <- tokens %>%
inner_join(get_sentiments("bing")) %>% # pull out the sentiment words
count(sentiment) %>%   # count the number of positive and negative words
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive/negative) # number of pos. words - number of neg. words
return(sentiment)
}
bing.sp <- bing(hm_data.sp)
bing.mp <- bing(hm_data.mp)
bing.s <- bing(hm_data.s)
bing.m <- bing(hm_data.m)
bing.c <- rbind(bing.sp,bing.mp,bing.s,bing.m)
bing.c$Demographic_Groups <- c('Single Parents','Married Parents','Single Non-parents','Married Non-parents')
bing.c
afinn <- function(df){
tokens <- data_frame(df$text) %>% unnest_tokens(word, df$text)
sentiment <- tokens %>%
inner_join(get_sentiments("afinn"))   # pull out the sentiment words and asign score
return(sentiment)
}
afinn.sp <- mean(afinn(hm_data.sp)$score)
afinn.mp <-mean(afinn(hm_data.mp)$score)
afinn.s <-mean(afinn(hm_data.s)$score)
afinn.m <-mean(afinn(hm_data.m)$score)
afinn.vec <- data.frame(afinn = c(afinn.sp, afinn.mp,afinn.s,afinn.m))
both <- cbind(bing.c$Demographic_Groups,  bing.c[,3], afinn.vec)
colnames(both) <- c('Demographic_Groups', 'bing', 'afinn')
both
melt.sentiments <- melt(both, id.vars = "Demographic_Groups")
ggplot(melt.sentiments, aes(variable, value)) +
geom_bar(aes(fill = Demographic_Groups), position = "dodge", stat = "identity")
# all samples vs. single parents vs. married parents
par(mfrow = c(1,3))
sentiment.all <- get_sentiment(hm_data$text, method = "syuzhet")
order.data.cp <- hm_data.cp[order(hm_data.cp$wid),]
order.data.cp$status <- ifelse(order.data.cp$marital == "single", 1, 2)
order.data.c <- hm_data.c[order(hm_data.c$wid),]
order.data.c$status <- ifelse(order.data.c$marital == "single", 3, 4)
combine <- rbind(order.data.cp,order.data.c)
combine.data <- combine  %>%
group_by(wid) %>%
summarise(text = paste(text, collapse = " "), status = mean(status))
combine.docs <- Corpus(VectorSource(combine.data$text))
dtm.combine <- DocumentTermMatrix(combine.docs)
lda <- LDA(dtm.combine, k = 3, control = list(seed = 2))
# the beta matrix
topics <- tidy(lda, matrix = "beta")
head(topics,6)
#Find the top ten words in each topic.
top.words <- topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top.words %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
#Find the top ten words in each topic.
top.words <- topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
top.words %>%
mutate(term = reorder(term, beta)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
coord_flip()
topic.prob <- as.data.frame(lda@gamma)
topics.tag <- c("Family", "Job", "Friend")
lda.topics <- as.matrix(topics(lda))
combine.data$topic <- as.vector(lda.topics)
combine.data$ldatag <- topics.tag[lda.topics]
colnames(topic.prob) <- topics.tag
combine.data.corpus <- cbind(combine.data,topic.prob)
topic.status<-tbl_df(combine.data.corpus)%>%
select(status, Family:Friend)%>%
group_by(status)%>%
summarise_all(funs(mean))
topic.status=as.data.frame(topic.status)
rownames(topic.status)<-topic.status$status
as.mat <- as.matrix(topic.status[,-1])
rownames(as.mat) <- c('Single Parents','Married Parents','Single Non-parents','Married Non-parents')
melted_topic <- melt(as.mat)
ggplot(data = melted_topic, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
